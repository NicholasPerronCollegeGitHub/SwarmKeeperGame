Main.java{
    Does little on its own, sets the scene to the first menu screen, and sets the window title and icon(missing)
}

Menus[
    StartMenu.java{
        boolean next: This appears to be depriciated, but its better to not risk removing it
        public static Scene MainMenuConst{
            Contains three buttons, as well as the panes to order them and a title screen image(missing)
            Buttons:
                -Exit: Closes the application
                -Tutorial: Opens a new stage based on the HowToPlayMenu.TutorialConst() function
                -StartGame: Changes the main menu scene to the one specified in FactionSelect.FactionSelectConst()
        }
    }
    HowToPlayMenu.java{
        public static Scene TutorialConst(){
            Contains various panes with labels to describe basic gameplay (may be unimplemented), as well as a single button
            Button back: closes the window, allowing one to return to the main menu scene
        }
    }
    FactionSelect.java{
        contains the booleans P1Selected and P2Selected, used to track whether players 1 and 2 respectively have selected a group to play

        FactionSelect.FactionSelectConst.java(){
            contains 9 buttons and 4 images(unimplemented)
            Buttons can be divided into 3 groups, 4 are information buttons, 4 are selection buttons, and 1 is the start button
                InformationButtons: Fac1Info, Fac2Info, Fac3Info, Fac4Info: each creates a window with titled panes of information about their respective factions (unimplemented/partially implemented) as well as a close button
                SelectionButtons: Fac1Select, Fac2Select(Disabled), Fac3Select(Disabled), Fac4Select: Each button checks the state of P1Selected, if false, it passes its repsective number to MainGameLogic.setP1Fac as well as disabling itself. If true, it instead passes the number to MainGameLogic.setP2Fac, disables every selection button, and enables the start button
                StartButton: StartGame: Changes the current scene to the one specified by GameBoard.GameBoardConst()
        }
    }
    GameBoard.Java{
        static int[] selectLoc: used for passing values to MainGameLogic.java

        public static Scene GameBoardConst{
            Contains various nested panes for formatting, several labels and images that change based on the state of gameplay, as well as two categories of buttons, mapGrid and menuButtons

            Buttons:
                MapGrid: a 20x20 grid of square buttons contained in a gridpane, on click each of them sends their position in the gridpane to MainGameLogic.selectLoc(), then images and texts are updated with the MainGameLogic functions .getBoardStateAtLoc(), .getCurrentBio(), .getCurrentMin(), getSelectedStatsBasic() andd .getStatus()
                    Additionally uses the functions .getPortraitPath() and .getTilePath() from the Entity class
                MenuButtons:
                    TurnButton: Calls MainGameLogic.nextTurn(), as well as update information similar to the mapGrid buttons
                    SelectedInfo: Opens a new window of titled panes with labels, along with a close button. Lables contain output of MainGameLogic.getBoardStateatLoc(MainGameLogic.getSelectedLoc()).getDesc() and MainGameLogic.getSelectedStatsAdvanced()
                    Move: sets MainGameLogic.selectedMode to 1 through MainGameLogic.setSelectedMode(int); additonally updates text outputs
                    Attack: sets MainGameLogic.selectedMode to 1 through MainGameLogic.setSelectedMode(int); additonally updates text outputs
                    Build: sets MainGameLogic.selectedMode to 1 through MainGameLogic.setSelectedMode(int); additonally updates text outputs

        }

    }
]
GameMechanics[
    MainGameLogic.java{
        static int P1Fac : stores numerical value of player 1's selected faction
        static int P2Fac : stores numerical value of player 2's selected faction
        static int turn : stores the current turn
        static int nextTurn : stores the next non-zero turn value
        static int p1Bio : stores player 1's current biomass resource
        static int p1BioInc : depriciated, intended to contain p1 bio income per turn
        static int p1Min : stores player 1's current mineral resource
        static int p1MinInc : depriciated, intended to contain p1 min income per turn
        static int p2Bio : stores player 2's current biomass resource
        static int p2BioInc : depriciated, intended to contain p2 bio income per turn
        static int p2Min : stores player 2's current mineral resource
        static int p2MinInc : depriciated, intended to contain p2 min income per turn
        static int X1 : Appears unused
        static int Y1 : Appears unused
        static int X2 : Appears unused
        static int Y2 : Appears unused
        static int selectMode : stores the current mode of selection
        static int[] selectedLoc : stores the current selected location
        static int[] savedLoc : stores the previously selected location for the purposes of various select modes
        static int[] waitingUnitID : stores the ID of an entity before it is created
        static int constructionSpecialMode : stores whether the current entity being placed has special conditions to its location

        Entity[][] boardState = new Entity[20][20] : 2d array to represent the game board through code

        static block{
            iterates through the boardstate array, setting default values to each tile
        }

        public static void startGame(){
            adds each player's starting location to the boardState Entity array, then scatters neutral min and bio deposits throughout it
        }
        public static int getCurrentTurn(){
            returns the current turn
        }
        public static void setP1Fac(int){
            Sets the selected faction of player 1
        }
        public static void setP2Fac(int){
            Same, but for player 2
        } 
        public static int getP1Fac(){
            returns player 1's numerical faction value
        }
        public static int getP2Fac(){
            same as above, but for player 2 instead
        }
        public static void selectLoc(int[]){
            changes the selected location to the inputted integer array, then depending on the select mode, swaps values in the boardState[][] array, runs Entity.takeDamage(int) on specified indexes, 
        }
        public static int[] getSelectedLoc(){
            returns the selectedLoc array
        }
        public static Entity getBoardStateAtLoc(int[] coords){
            returns the value of the boardState array at the specified location, as specified with Boardstate[coords[0]][coords[1]]
        }
        public static void setBoardStateAtLoc(int[],Entity){
            selects a location in the same process as above, then sets that location to the Entity parameter
        }
        public static String getStatus(){
            returns a variety of strings depending on the current turn, player actions, and the selectedMode value 
        }
        public static int setSelectedMode(int){
            sets the selectedMode to the specified integer
        }
        public static void iterateSight(){
            iterates through the boardState[][] array, updating the visible boolean of each of the contained entities based on the current turn
        }
        public static void nextTurn(){
            if current turn is 0, start the next player's turn
            if current turn is not 0, change the nextTurn value to the opposite of the current turn, iterate through the player's entities to reset their movesMade and hasAttkd values, and adds to the current player's Bio and Min resources, then sets the turn to 0
        }
        public static int getCurrentBio(){
            if turn = 0, return 0
            otherwise, return the current player's bio resource
        }
        public static int getCurrentMin(){
            Same as above, but for Min instead
        }
        public static string getTurnStatus(){
            returns either "Start turn" or "End turn" if the turn value is or is not 0 respectively
        }
        public static string getSelectedStatsBasic(){
            if the selected tile does not belong to team 0, return a few of the units statisitics in the form of a formatted string, otherwise return null
        }
        public static string getSelectedStatsAdvanced(){
            essentially the same as above, but returns more information if team does not equal 0
        }
        public static void checkSelectedBuildable(){
            checks the Entity at the selected location, either contnues with the build function, or cancels it depending on its canBuild boolean
        }
        public static void buildReturnValue(boolean){
            returns true if building preparation is successful, false otherwise
        }
        public static void UnitCreate(int[]){
            sets waitingUnitID to the specified integer array
        }
        public static void setConstructionSpecialMode(int){
            sets the constructionSpecialMode value to the specified integer
        }
    Entity.java{
        private int team : Stores the numerical value of the entitys' controller
        private int health : Stores the current hp of the entity
        private int speed : Stores stores the move speed of the entity
        private int movesMade : Stores how many moves the entity has made this turn
        private int sightRange : Stores the sight range of the entity
        private int damage : Stores the damage value of the entity
        private int attkRange : Stores the attack range of the entity
        private String imgPath : Stores the path to the game tile representation of the entity
        private String portraitPath : Stores the path to the portrait representation of the entity
        private String Description : Stores the description of the entity
        private boolean visible : Stores wheter the entity can be seen by the current active player
        private boolean empty : Stores whether the entity is considered empty space for the purposes of movement and creation
        private boolean hasAttkd : Stores whether the entity has attacked this turn
        private boolean canBuild : Stores whether the entity can be the source of another
        private boolean capturable : Stores whether the entity is considered capturable (essentially if it is considered a resource node)
        private int[] typeID : Stores the two integer ID of the entity, such as for use with any of the StatsIndex.java functions

        contains 3 constructors:
            public Entity(int[]){
                sets each of the fields above according to the inputted int[], using StatsIndex.get<NAME>(int[]) functions
                sets team to the current active team using MainGameLogic.getCurrentTurn()
            }
            public Entity(int[],int){
                same as above, but the second int is used to override the team number
            }
            public Entity(){
                Creates an entity with default values for each of the fields, used for initializing a two dimensional array of the Entity type
            }

            Various Getters and Setters for the above fields

            public void takeDamage(int){
                subtracts the inputted integer from the Entity's health value, then if <= 0 , reverts the entity to either an empty tile, or a neutral resource deposit, depending on whether capturable is false or true repsectively
            }
    }
    StatsIndex.java{
        Contains a variety of two dimensional arrays: int[][] healthList, int[][] speedList, int[][] sightRangeList, int[][] damageList, int[][] attkRange, String[][] imgStubList, String[][] portraitList, String[][] descList, and Boolean[][] canBuild.
        each has a getter method with the format:
            get<NAME>(int[] ID){
                return(<NAMELIST>[ID[0]][ID[1]]);
            }
    }
    CanBuildList.java{
        public static int currentBioCost
        public static int currentMinCost

        public static void checkBuild(int[] ID){
            Creates a button list of options in a new window based on the inputted ID array if the current player's Bio or Min values are lower than a specified cost, then the button is Disabled
                when clicked, each button sets currentBioCost and currentMinCost to the specified cost sends an integer array to MainGameLogic.UnitCreate(int[]) based on the selected option, passes a value to MainGameLogic.constructionSpecialMode(int) if neccessary, calls MainGameLogic.setBuildReturnValue(true), and closes the popup list
            Additionally, an exit button that calls MainGameLogic.setBuildReturnValue(false) and closes the window
            the window also calls that function if it is closed through outside means, such as the Windows close button
        }
        public static int getCurrentBioCost{
            returns the currentBioCost integer value
        }
        public static int getCurrentMinCost{
            returns the currentMinCost integer value
        }
        public static void resetCurrentCost(){
            sets currentBioCost and currentMinCost to 0
        }
    }
]